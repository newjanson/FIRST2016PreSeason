package org.usfirst.frc2609.Bendgate.subsystems;

import org.usfirst.frc2609.Bendgate.OI;
import org.usfirst.frc2609.Bendgate.Robot;
import org.usfirst.frc2609.Bendgate.RobotMap;
import org.usfirst.frc2609.Bendgate.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class elevatorDrive extends PIDSubsystem {
	
    Encoder quadratureEncoder1 = RobotMap.encoderElevator;
    CANTalon cANTalonLeft = RobotMap.canTalonEL;
    CANTalon cANTalonRight = RobotMap.canTalonER;

    // Initialize your subsystem here
    public elevatorDrive() {
        super("elevatorDrive", .004, 0.0, 0.0);
        setAbsoluteTolerance(20);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("elevatorDrive", "PIDSubsystem Controller", getPIDController());
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void elevatorReset(){
    	quadratureEncoder1.reset();
    }
    
    public void elevatorStick(){
    	if (Math.abs(OI.operatorPad.getRawAxis(5))>.15){
	    	Robot.elevatorDrive.enable();
	    	Robot.elevatorDrive.setSetpoint(quadratureEncoder1.get()+(500*-OI.operatorPad.getRawAxis(5)));
    	}
    	else{
    		Robot.elevatorDrive.disable();
    	}
    	//robotDrive.arcadeDrive(OI.driverPad, true);
    	//robotDrive.arcadeDrive(OI.driverPad.getRawAxis(2),OI.driverPad.getRawAxis(3),true);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new elevatorDisable());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
        return quadratureEncoder1.get();
    }
    
    protected void usePIDOutput(double output) {
    	if (cANTalonLeft.isFwdLimitSwitchClosed()==true || cANTalonRight.isRevLimitSwitchClosed()==true){
    		quadratureEncoder1.reset();
    	}
    	SmartDashboard.putNumber("encoder", quadratureEncoder1.get());
    	SmartDashboard.putBoolean("RightisFwdLimitSwitchClosed", cANTalonRight.isFwdLimitSwitchClosed());
    	SmartDashboard.putBoolean("RightisRevLimitSwitchClosed", cANTalonRight.isRevLimitSwitchClosed());
    	SmartDashboard.putBoolean("LeftisFwdLimitSwitchClosed", cANTalonLeft.isFwdLimitSwitchClosed());
    	SmartDashboard.putBoolean("LeftisRevLimitSwitchClosed", cANTalonLeft.isRevLimitSwitchClosed());
        cANTalonLeft.set(-output);
        cANTalonRight.set(output);
    }
}
