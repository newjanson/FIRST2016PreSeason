package org.usfirst.frc2609.Bendgate.subsystems;
import org.usfirst.frc2609.Bendgate.OI;
import org.usfirst.frc2609.Bendgate.RobotMap;
import org.usfirst.frc2609.Bendgate.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class robotDrive extends PIDSubsystem {
	
    CANTalon canTalonLF = RobotMap.canTalonLF;
    CANTalon canTalonLR = RobotMap.canTalonLR;
    CANTalon canTalonRF = RobotMap.canTalonRF;
    CANTalon canTalonRR = RobotMap.canTalonRR;
    RobotDrive robotDrive = RobotMap.robotDrive;
    Encoder encoderLeftDrive = RobotMap.encoderLeftDrive;
    Encoder encoderRightDrive = RobotMap.encoderRightDrive;
    Gyro gyroOne = RobotMap.gyroOne;

    // Initialize your subsystem here
    public robotDrive() {
        super("robotDrive", 0.1, 0.0, 0.0);
        setAbsoluteTolerance(20);
        getPIDController().setContinuous(true);
        LiveWindow.addActuator("robotDrive", "PIDSubsystem Controller", getPIDController());

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void bendDrive(){
    	robotDrive.arcadeDrive(OI.driverPad.getRawAxis(2), OI.driverPad.getRawAxis(3), true);
    }
    
    public void driveReset(){
    	encoderLeftDrive.reset();
    	encoderRightDrive.reset();
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        return ((Math.abs(encoderLeftDrive.get())+Math.abs(encoderRightDrive.get()))/2);
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        canTalonLF.pidWrite(output);
        canTalonLR.pidWrite(output);
        canTalonRF.pidWrite(-output);
        canTalonRR.pidWrite(-output);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
}
