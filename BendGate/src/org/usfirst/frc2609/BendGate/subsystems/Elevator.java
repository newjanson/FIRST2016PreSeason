package org.usfirst.frc2609.BendGate.subsystems;

import org.usfirst.frc2609.BendGate.RobotMap;
import org.usfirst.frc2609.BendGate.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Elevator extends PIDSubsystem {
	
    Encoder quadratureEncoder1 = RobotMap.elevatorQuadratureEncoder1;
    CANTalon cANTalonLeft = RobotMap.elevatorCANTalonLeft;
    CANTalon cANTalonRight = RobotMap.elevatorCANTalonRight;

    // Initialize your subsystem here
    public Elevator() {
        super("Elevator", .005, 0.0, 0.0);
        setAbsoluteTolerance(20);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Elevator", "PIDSubsystem Controller", getPIDController());
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    public void elevatorReset(){
    	quadratureEncoder1.reset();
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
        return quadratureEncoder1.get();
    }
    
    protected void usePIDOutput(double output) {
    	SmartDashboard.putNumber("encoder", quadratureEncoder1.get());
        cANTalonLeft.pidWrite(-output);
        cANTalonRight.pidWrite(output);
    }
}
