 
package org.usfirst.frc2609.BendGate;

import org.usfirst.frc2609.BendGate.commands.*;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
	Encoder quadratureEncoder1 = RobotMap.elevatorQuadratureEncoder1;
    public JoystickButton openBottomGripper;
    public JoystickButton closeBottomGripper;
    public JoystickButton doRollersIn;
    public JoystickButton doRollersOut;
    public static Joystick driver;
    public static Joystick operator;


    public OI() {

        driver = new Joystick(0);
        operator = new Joystick(1);
        
        doRollersOut = new JoystickButton(driver, 8);
        doRollersOut.whileHeld(new Rollersout());
        doRollersIn = new JoystickButton(driver, 7);
        doRollersIn.whileHeld(new RollersIn());
        doRollersIn.whenReleased(new rollerStop());
        doRollersOut.whenReleased(new rollerStop());
        
        closeBottomGripper = new JoystickButton(driver, 6);
        closeBottomGripper.whileHeld(new closeBGripper());
        openBottomGripper = new JoystickButton(driver, 5);
        openBottomGripper.whileHeld(new openBGripper());
        JoystickButton openTopGripper = new JoystickButton(operator, 5);
        openTopGripper.whileHeld(new openTGripper());
        JoystickButton closeTopGripper = new JoystickButton(operator, 6);
        closeTopGripper.whileHeld(new closeTGripper());
        JoystickButton elevator1 = new JoystickButton(operator, 1);
        elevator1.whileHeld(new elevator1());
        JoystickButton elevator2 = new JoystickButton(operator, 2);
        elevator2.whileHeld(new elevator2());
        JoystickButton elevator3 = new JoystickButton(operator, 3);
        elevator3.whileHeld(new elevator3());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("elevator1", new elevator1());
        SmartDashboard.putData("elevator2", new elevator2());
        SmartDashboard.putData("elevator3", new elevator3());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("openTGripper", new openTGripper());
        SmartDashboard.putData("closeTGripper", new closeTGripper());
        SmartDashboard.putData("openBGripper", new openBGripper());
        SmartDashboard.putData("closeBGripper", new closeBGripper());
        SmartDashboard.putData("elevatorUp", new elevatorUp());
        SmartDashboard.putData("RollersIn", new RollersIn());
        SmartDashboard.putData("Rollersout", new Rollersout());
        SmartDashboard.putData("Command Group 1", new CommandGroup1());

        

    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriver() {
        return driver;
    }

    public Joystick getOperator() {
        return operator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

